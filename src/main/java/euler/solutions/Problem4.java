package euler.solutions;

/*
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
*/

import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

public class Problem4{
	public Problem4(){

	}

	public static void main(String[] args){
		System.out.println("Hello World");
		Problem4 instance = new Problem4();


		// a test to see if is Palindrome worked

		/*
		if(instance.isPalindrome(Integer.parseInt(args[0]))){
			System.out.println("true");
		} else{
			System.out.println("false");
		}*/
		int num = instance.getPalindromes(Integer.parseInt(args[0]), Integer.parseInt(args[1]));

		System.out.println(num);
	}

	public Integer getPalindromes(int min, int max){
		Set<Integer> palindromeSet = new HashSet<Integer>();
		int testPali = 0;

		for(int i = max; i > min; i--){
			for(int num = max; num > min; num--){
				testPali = num * i;
				if(isPalindrome(testPali)){
					palindromeSet.add(testPali);
					System.out.println(testPali);
				}
			}
		}
		Integer num = Collections.max(palindromeSet);
		return num;
	}

	public boolean isPalindrome(Integer num){
		int n = num;
		int rev = 0;
		int dig = 0;
		while (num > 0)
		{
		  dig = num % 10;
		  rev = rev * 10 + dig;
		  num = num / 10;
		  if(n == rev)
		  	return true;
		}

		return false;
	}
}

/*
MY IDEA

we can assume that the largest palindrome generated by two 3-digit numbers
are most likely to be in the higher values. Therefore, you must work backward,
starting from 999 and multiply all numbers with each other below to find the
largest palinedrome generated.
*/